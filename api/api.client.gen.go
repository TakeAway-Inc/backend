// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRestaurantMenu request
	GetRestaurantMenu(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrder request with any body
	CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrdersOfRestaurantByID request
	GetOrdersOfRestaurantByID(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderByID request
	GetOrderByID(ctx context.Context, restaurantId string, orderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrderByBot request with any body
	UpdateOrderByBotWithBody(ctx context.Context, restaurantId string, orderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrderByBot(ctx context.Context, restaurantId string, orderId string, body UpdateOrderByBotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRestaurantPaymentOptions request
	GetRestaurantPaymentOptions(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRestaurantMenu(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantMenuRequest(c.Server, restaurantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrdersOfRestaurantByID(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersOfRestaurantByIDRequest(c.Server, restaurantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderByID(ctx context.Context, restaurantId string, orderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderByIDRequest(c.Server, restaurantId, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderByBotWithBody(ctx context.Context, restaurantId string, orderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderByBotRequestWithBody(c.Server, restaurantId, orderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrderByBot(ctx context.Context, restaurantId string, orderId string, body UpdateOrderByBotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrderByBotRequest(c.Server, restaurantId, orderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRestaurantPaymentOptions(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantPaymentOptionsRequest(c.Server, restaurantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRestaurantMenuRequest generates requests for GetRestaurantMenu
func NewGetRestaurantMenuRequest(server string, restaurantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, restaurantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/menu/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrderRequest calls the generic CreateOrder builder with application/json body
func NewCreateOrderRequest(server string, body CreateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrderRequestWithBody generates requests for CreateOrder with any type of body
func NewCreateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrdersOfRestaurantByIDRequest generates requests for GetOrdersOfRestaurantByID
func NewGetOrdersOfRestaurantByIDRequest(server string, restaurantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, restaurantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderByIDRequest generates requests for GetOrderByID
func NewGetOrderByIDRequest(server string, restaurantId string, orderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, restaurantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "order_id", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/order/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrderByBotRequest calls the generic UpdateOrderByBot builder with application/json body
func NewUpdateOrderByBotRequest(server string, restaurantId string, orderId string, body UpdateOrderByBotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrderByBotRequestWithBody(server, restaurantId, orderId, "application/json", bodyReader)
}

// NewUpdateOrderByBotRequestWithBody generates requests for UpdateOrderByBot with any type of body
func NewUpdateOrderByBotRequestWithBody(server string, restaurantId string, orderId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, restaurantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "order_id", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/order/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRestaurantPaymentOptionsRequest generates requests for GetRestaurantPaymentOptions
func NewGetRestaurantPaymentOptionsRequest(server string, restaurantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, restaurantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/payment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRestaurantMenu request
	GetRestaurantMenuWithResponse(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*GetRestaurantMenuResponse, error)

	// CreateOrder request with any body
	CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	// GetOrdersOfRestaurantByID request
	GetOrdersOfRestaurantByIDWithResponse(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*GetOrdersOfRestaurantByIDResponse, error)

	// GetOrderByID request
	GetOrderByIDWithResponse(ctx context.Context, restaurantId string, orderId string, reqEditors ...RequestEditorFn) (*GetOrderByIDResponse, error)

	// UpdateOrderByBot request with any body
	UpdateOrderByBotWithBodyWithResponse(ctx context.Context, restaurantId string, orderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderByBotResponse, error)

	UpdateOrderByBotWithResponse(ctx context.Context, restaurantId string, orderId string, body UpdateOrderByBotJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderByBotResponse, error)

	// GetRestaurantPaymentOptions request
	GetRestaurantPaymentOptionsWithResponse(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*GetRestaurantPaymentOptionsResponse, error)
}

type GetRestaurantMenuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Categories []Category `json:"categories"`

		// Отсортированный список блюд
		Dishes []Dish          `json:"dishes"`
		Style  RestaurantStyle `json:"style"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRestaurantMenuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRestaurantMenuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r CreateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersOfRestaurantByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Order
}

// Status returns HTTPResponse.Status
func (r GetOrdersOfRestaurantByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersOfRestaurantByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r GetOrderByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrderByBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateOrderByBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrderByBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRestaurantPaymentOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PaymentOption
}

// Status returns HTTPResponse.Status
func (r GetRestaurantPaymentOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRestaurantPaymentOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRestaurantMenuWithResponse request returning *GetRestaurantMenuResponse
func (c *ClientWithResponses) GetRestaurantMenuWithResponse(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*GetRestaurantMenuResponse, error) {
	rsp, err := c.GetRestaurantMenu(ctx, restaurantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantMenuResponse(rsp)
}

// CreateOrderWithBodyWithResponse request with arbitrary body returning *CreateOrderResponse
func (c *ClientWithResponses) CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

// GetOrdersOfRestaurantByIDWithResponse request returning *GetOrdersOfRestaurantByIDResponse
func (c *ClientWithResponses) GetOrdersOfRestaurantByIDWithResponse(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*GetOrdersOfRestaurantByIDResponse, error) {
	rsp, err := c.GetOrdersOfRestaurantByID(ctx, restaurantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersOfRestaurantByIDResponse(rsp)
}

// GetOrderByIDWithResponse request returning *GetOrderByIDResponse
func (c *ClientWithResponses) GetOrderByIDWithResponse(ctx context.Context, restaurantId string, orderId string, reqEditors ...RequestEditorFn) (*GetOrderByIDResponse, error) {
	rsp, err := c.GetOrderByID(ctx, restaurantId, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderByIDResponse(rsp)
}

// UpdateOrderByBotWithBodyWithResponse request with arbitrary body returning *UpdateOrderByBotResponse
func (c *ClientWithResponses) UpdateOrderByBotWithBodyWithResponse(ctx context.Context, restaurantId string, orderId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrderByBotResponse, error) {
	rsp, err := c.UpdateOrderByBotWithBody(ctx, restaurantId, orderId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderByBotResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrderByBotWithResponse(ctx context.Context, restaurantId string, orderId string, body UpdateOrderByBotJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrderByBotResponse, error) {
	rsp, err := c.UpdateOrderByBot(ctx, restaurantId, orderId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrderByBotResponse(rsp)
}

// GetRestaurantPaymentOptionsWithResponse request returning *GetRestaurantPaymentOptionsResponse
func (c *ClientWithResponses) GetRestaurantPaymentOptionsWithResponse(ctx context.Context, restaurantId string, reqEditors ...RequestEditorFn) (*GetRestaurantPaymentOptionsResponse, error) {
	rsp, err := c.GetRestaurantPaymentOptions(ctx, restaurantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantPaymentOptionsResponse(rsp)
}

// ParseGetRestaurantMenuResponse parses an HTTP response from a GetRestaurantMenuWithResponse call
func ParseGetRestaurantMenuResponse(rsp *http.Response) (*GetRestaurantMenuResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRestaurantMenuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Categories []Category `json:"categories"`

			// Отсортированный список блюд
			Dishes []Dish          `json:"dishes"`
			Style  RestaurantStyle `json:"style"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrderResponse parses an HTTP response from a CreateOrderWithResponse call
func ParseCreateOrderResponse(rsp *http.Response) (*CreateOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrdersOfRestaurantByIDResponse parses an HTTP response from a GetOrdersOfRestaurantByIDWithResponse call
func ParseGetOrdersOfRestaurantByIDResponse(rsp *http.Response) (*GetOrdersOfRestaurantByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersOfRestaurantByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrderByIDResponse parses an HTTP response from a GetOrderByIDWithResponse call
func ParseGetOrderByIDResponse(rsp *http.Response) (*GetOrderByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrderByBotResponse parses an HTTP response from a UpdateOrderByBotWithResponse call
func ParseUpdateOrderByBotResponse(rsp *http.Response) (*UpdateOrderByBotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrderByBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRestaurantPaymentOptionsResponse parses an HTTP response from a GetRestaurantPaymentOptionsWithResponse call
func ParseGetRestaurantPaymentOptionsResponse(rsp *http.Response) (*GetRestaurantPaymentOptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRestaurantPaymentOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PaymentOption
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
