openapi: 3.0.3
info:
  title: Take Away API
  description: Take Away
  version: 0.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /api/menu/{restaurant_id}:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant ID or restaurant short name
        required: true
        schema:
          type: string
    get:
      operationId: getRestaurantMenu
      description: ''
      responses:
        200:
          $ref: '#/components/responses/getRestaurantResponse'

  /api/payment/{restaurant_id}:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant ID or restaurant short name
        required: true
        schema:
          type: string
    get:
      operationId: getRestaurantPaymentOptions
      description: ''
      responses:
        200:
          $ref: '#/components/responses/getPaymentOptionsResponse'


  /api/order:
    post:
      operationId: createOrder
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newOrder'
      responses:
        200:
          $ref: '#/components/responses/createOrderResponse'

  /api/order/{restaurant_id}:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant ID or restaurant short name
        required: true
        schema:
          type: string
    get:
      operationId: getOrdersOfRestaurantByID
      description: ''
      responses:
        200:
          $ref: '#/components/responses/getOrderResponse'

  /api/order/{restaurant_id}/{order_id}:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant ID or restaurant short name
        required: true
        schema:
          type: string
      - name: order_id
        in: path
        description: ID of order
        required: true
        schema:
          type: string
    get:
      operationId: getOrderByID
      description: ''
      responses:
        200:
          $ref: '#/components/responses/getOrderResponse'
    put:
      operationId: updateOrderByBot
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatedOrderByBot'
      responses:
        200:
          description: ''


components:
  responses:
    getOrderResponse:
      description: Order response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/order'

    getOrdersResponse:
      description: Order response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/order'

    createOrderResponse:
      description: Order response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/order'

    getPaymentOptionsResponse:
      description: ''
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/paymentOption'

    getRestaurantResponse:
      description: Full content of the restaurant's menu
      content:
        application/json:
          schema:
            type: object
            required:
              - categories
              - dishes
              - style
            properties:
              categories:
                type: array
                items:
                  $ref: '#/components/schemas/category'
              dishes:
                description: Отсортированный список блюд
                type: array
                items:
                  $ref: '#/components/schemas/dish'
              style:
                $ref: '#/components/schemas/restaurantStyle'

  schemas:
    updatedOrderByBot:
      type: object
      properties:
        status:
          type: string
          enum:
            - created
            - processing
            - canceled
            - done

    newOrder:
      type: object
      required:
        - positions
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/orderPosition'

    order:
      type: object
      required:
        - orderId
        - restaurantId
        - status
        - positions
        - comment
      properties:
        orderId:
          type: string
        restaurantId:
          type: string
        status:
          type: string
          enum:
            - created
            - processing
            - canceled
            - done
        positions:
          type: array
          items:
            $ref: '#/components/schemas/orderPosition'
        comment:
          type: string

    orderPosition:
      type: object
      required:
        - dish
        - quantity
      properties:
        dish:
          $ref: '#/components/schemas/dish'
        quantity:
          type: number

    paymentOption:
      type: object
      description: Payment option
      required:
        - shownName
        - description
        - imageUrl
      properties:
        shownName:
          type: string
          description: Отображаемое название способа оплаты
        description:
          type: string
          description: Описание способа оплаты
        imageUrl:
          type: string
          description: Ссылка на изображение способа оплаты
        paymentForwardUrl:
          type: string
          description: Ссылка на переход на сайт платежной системы

    currency:
      type: string
      enum:
        - RUB
      default: RUB

    unavailableLabel:
      type: object
      description: Текст, который будет отображаться в случае отсутствия блюда в меню в данный момент
      required:
        - shownText
      properties:
        shownText:
          type: string

    dish:
      type: object
      description: Связь с `category` по `categoryId`
      required:
        - id
        - shownName
        - description
        - previewImageUrl
        - imageUrl
        - categoryId
        - price
      properties:
        id:
          type: string
          format: uuid
        shownName:
          type: string
          minLength: 1
        description:
          type: string
        previewImageUrl:
          type: string
          format: uri
        imageUrl:
          type: string
          format: uri
        unavailableLabel:
          $ref: '#/components/schemas/unavailableLabel'
        categoryId:
          type: string
          format: uuid
        price:
          type: object
          properties:
            amount:
              type: integer
              minimum: 0
            currency:
              $ref: '#/components/schemas/currency'
        weight:
          type: integer
          minimum: 0
        calories:
          type: integer
          minimum: 0
        proteins:
          type: integer
          minimum: 0
        fats:
          type: integer
          minimum: 0
        carbohydrates:
          type: integer
          minimum: 0


    category:
      type: object
      required:
        - id
        - shownName
      properties:
        id:
          type: string
          format: uuid
        shownName:
          type: string
          minLength: 1

    restaurantStyle:
      type: object
      required:
        - id
        - restaurantShownName
        - iconUrl
        - backgroundColor
      properties:
        id:
          type: string
          format: uuid
        restaurantShownName:
          type: string
          minLength: 1
        iconUrl:
          type: string
          format: uri
        backgroundColor:
          type: string
          format: hexColor
          example: "#ffffff"

